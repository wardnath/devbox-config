# Enable mouse mode
set -g mouse on

set-option -g prefix C-b
set-option -g prefix2 C-Space
bind C-b send-prefix
bind C-Space send-prefix

# Set window titles automatically
set -g set-titles on

# Use zsh as the default shell
set-option -g default-shell "/bin/zsh"

# Reload tmux config with Ctrl-b r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Enable automatic window renaming
setw -g automatic-rename on

# True color support
set-option -sa terminal-overrides ",xterm*:Tc"

# Keep windows open after a process exits
set -g remain-on-exit on

# Set escape time for quicker response
set -s escape-time 50

# Toggle mouse mode with M (mouse on) and m (mouse off)
bind-key M set mouse on \; display-message 'Mouse: ON'
unbind m
bind-key m set mouse off \; display-message 'Mouse: OFF'

# Create new window and split panes preserving current working directory
bind c new-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"

# Pane resizing with Ctrl + Arrow keys (resize by 5 units)
bind -n C-Left  resize-pane -L 5
bind -n C-Right resize-pane -R 5
bind -n C-Up    resize-pane -U 5
bind -n C-Down  resize-pane -D 5

# new 250604
# Additional key bindings to add to your tmux.conf

# 1. Add Ctrl-b p to go to previous pane
# Note: This will override the default paste binding (p)
# If you want to keep paste, use a different key like ‘P’ (uppercase)

bind p select-pane -t :.-  # Previous pane

# Alternative: bind P select-pane -t :.-  # Use uppercase P instead

# 2. Smart pane movement - move to next window or create new one
# Using different key bindings to avoid conflict with mouse toggle

# Option A: Use ‘>’ for “move pane forward”

bind > run-shell ‘  
if [ $(tmux list-windows | wc -l) -eq 1 ]; then   
tmux break-pane;   
else   
CURRENT=$(tmux display-message -p “#{window_index}”);   
NEXT=$(tmux list-windows -F “#{window_index}” | awk -v curr=”$CURRENT” “$1 > curr {print $1; exit}”);   
if [ -z “$NEXT” ]; then   
NEXT=$(tmux list-windows -F “#{window_index}” | head -1);   
fi;   
tmux join-pane -t :$NEXT;   
fi’

# Option B: Use ‘J’ for “Join pane to next window”

bind J run-shell ‘  
if [ $(tmux list-windows | wc -l) -eq 1 ]; then   
tmux break-pane;   
else   
CURRENT=$(tmux display-message -p “#{window_index}”);   
NEXT=$(tmux list-windows -F “#{window_index}” | awk -v curr=”$CURRENT” “$1 > curr {print $1; exit}”);   
if [ -z “$NEXT” ]; then   
NEXT=$(tmux list-windows -F “#{window_index}” | head -1);   
fi;   
tmux join-pane -t :$NEXT;   
fi’

# Option C: Use ‘T’ for “Transfer pane”

bind T run-shell ‘  
if [ $(tmux list-windows | wc -l) -eq 1 ]; then   
tmux break-pane;   
else   
CURRENT=$(tmux display-message -p “#{window_index}”);   
NEXT=$(tmux list-windows -F “#{window_index}” | awk -v curr=”$CURRENT” “$1 > curr {print $1; exit}”);   
if [ -z “$NEXT” ]; then   
NEXT=$(tmux list-windows -F “#{window_index}” | head -1);   
fi;   
tmux join-pane -t :$NEXT;   
fi’


# TPM plugin manager and essential plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'catppuccin/tmux'

# Continuum settings - DISABLE auto-save, keep manual save and restore
set -g @continuum-save-interval '0'  # Disable auto-save (0 = disabled)
set -g @continuum-restore 'on'       # Keep auto-restore on tmux start
set -g @split-statusbar-mode 'on'

# TPM run (Tmux Plugin Manager)
run -b '~/.tmux/plugins/tpm/tpm'

# Miscellaneous options for smooth experience
set -g remain-on-exit off  # Close window after process exits
set -g history-limit 10000  # Increase scrollback history
setw -g monitor-activity on  # Monitor activity in background panes
set -g visual-activity on    # Highlight panes with activity
setw -g mode-keys vi         # Use vi-style key bindings in copy mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
bind p paste-buffer          # Paste from buffer
bind -T copy-mode-vi 'Enter' send -X copy-pipe-and-cancel "xclip -selection clipboard -i"
